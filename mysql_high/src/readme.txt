第5章 存储引擎

1.查看存储引擎
show engines;

2.查看默认的存储引擎
select @@default_storage_engine

3.设置默认存储引擎
创建表时通过参数  ENGINE = 引擎名  来指定
修改表的存储引擎通过 ALTER TABLE 表名 ENGINE = 引擎名 来修改

4.引擎介绍
    InnoDB：具备外键支持功能的事务存储引擎
        优点：
            支持事务，支持事务的提交和回滚
            更新、删除操作效率更高
            支持行级锁
        缺点：
            效率差一些、内存要求高(聚簇索引)

    MyISAM：非事务处理存储引擎
        优点：
            访问速度快，对count(*)查询效率高
            适合读和插入为主的应用
        缺点：
            不支持事务，崩溃后无法恢复

第6章 索引的数据结构
1.为什么使用索引
    索引是存储引擎用于快速找到数据记录的一种数据结构
2.索引及其优缺点
    优点：
        降低IO成本
        可以通过唯一索引保证数据的唯一性
        可以加速表和表之间的连接
        可以显著减少查询中分组和排序的时间
    缺点：
        创建和维护索引需要耗费时间
        索引需要占磁盘空间
        会降低更新表的速度
3.InnoDB索引的推演
    在一个页中查找：
        以主键为搜索条件，使用二分
        以其他列作为搜索条件，从最小记录开始依次遍历
    在很多页中查找：
        需要首先定位数据所在的页，然后在所在页中查找记录，在没有索引情况下，需要从第一个页依次查找，十分耗时，因此需要使用索引
    设计索引：
        一步一步迭代为B+树
        为什么B+树通常不超过4层，因为一个页有16kb，4层就可以存放相当多的记录
    常见索引概念：
        聚簇索引：是一种数据存储方式，即所谓的索引即数据，数据即索引，叶子节点存放的是完整的记录
            优点：
                数据访问更快
                节省IO操作
            缺点：
                插入速度严重依赖于插入顺序
                更新主键代价很高
                二级索引访问需要两次索引查找
            限制：
                InnoDB中才有聚簇索引
                表只能有一个聚簇索引
                如果没有定义主键，会选择非空的唯一索引代替，如果没有这样的索引，会隐式的定义一个主键来作为局促索引
                选用有序的顺序id
        二级索引(辅助索引、非聚簇索引)：
            需要一次回表
        联合索引：
            多个字段联合创建索引
    B+树索引的注意事项：
        根页面位置万年不动
        内节点中目录项记录的唯一性
        一个页面最少存储两条记录
4.MyISAM中的索引方案
    同样使用B+树作为索引结构
    

